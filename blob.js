/// blob.js
document.addEventListener('DOMContentLoaded', function () {
    var main = 'https://blobby-boi.github.io/uBlobeBM/main.js';
    var fallback = 'https://cdn.jsdelivr.net/gh/Blobby-Boi/uBlobeBM@d78e71d/main.js';
    var fallback2 = atob("").replace(/Ã/g, '×');
    
    var script = document.createElement('script');
    script.src = main;
    script.onerror = function () {
        var script2 = document.createElement('script');
        script2.src = fallback;
        script2.onerror = function () {
            var blob = new Blob([fallback2], { type: 'text/javascript' });
            var blobUrl = URL.createObjectURL(blob);
            var script3 = document.createElement('script');
            script3.src = blobUrl;
            document.body.appendChild(script3);
        };
        document.body.appendChild(script2);
    };
    document.body.appendChild(script);
});
