/// aa.js
document.addEventListener('DOMContentLoaded', function () {
    var main = 'data:text/javascript;base64,';
    var script = document.createElement('script');
    script.src = main;
    document.body.appendChild(script);
});
